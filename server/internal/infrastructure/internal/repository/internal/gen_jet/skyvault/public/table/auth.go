//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Auth = newAuthTable("public", "auth", "")

type authTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	ProfileID      postgres.ColumnString
	Provider       postgres.ColumnString
	ProviderUserID postgres.ColumnString
	PasswordHash   postgres.ColumnString
	CreatedAt      postgres.ColumnTimestamp
	UpdatedAt      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AuthTable struct {
	authTable

	EXCLUDED authTable
}

// AS creates new AuthTable with assigned alias
func (a AuthTable) AS(alias string) *AuthTable {
	return newAuthTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuthTable with assigned schema name
func (a AuthTable) FromSchema(schemaName string) *AuthTable {
	return newAuthTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuthTable with assigned table prefix
func (a AuthTable) WithPrefix(prefix string) *AuthTable {
	return newAuthTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuthTable with assigned table suffix
func (a AuthTable) WithSuffix(suffix string) *AuthTable {
	return newAuthTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuthTable(schemaName, tableName, alias string) *AuthTable {
	return &AuthTable{
		authTable: newAuthTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newAuthTableImpl("", "excluded", ""),
	}
}

func newAuthTableImpl(schemaName, tableName, alias string) authTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		ProfileIDColumn      = postgres.StringColumn("profile_id")
		ProviderColumn       = postgres.StringColumn("provider")
		ProviderUserIDColumn = postgres.StringColumn("provider_user_id")
		PasswordHashColumn   = postgres.StringColumn("password_hash")
		CreatedAtColumn      = postgres.TimestampColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		allColumns           = postgres.ColumnList{IDColumn, ProfileIDColumn, ProviderColumn, ProviderUserIDColumn, PasswordHashColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{ProfileIDColumn, ProviderColumn, ProviderUserIDColumn, PasswordHashColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return authTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		ProfileID:      ProfileIDColumn,
		Provider:       ProviderColumn,
		ProviderUserID: ProviderUserIDColumn,
		PasswordHash:   PasswordHashColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
