//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ShareConfig = newShareConfigTable("public", "share_config", "")

type shareConfigTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	OwnerID      postgres.ColumnString
	FileID       postgres.ColumnString
	FolderID     postgres.ColumnString
	PasswordHash postgres.ColumnString
	MaxDownloads postgres.ColumnInteger
	ExpiresAt    postgres.ColumnTimestamp
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ShareConfigTable struct {
	shareConfigTable

	EXCLUDED shareConfigTable
}

// AS creates new ShareConfigTable with assigned alias
func (a ShareConfigTable) AS(alias string) *ShareConfigTable {
	return newShareConfigTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ShareConfigTable with assigned schema name
func (a ShareConfigTable) FromSchema(schemaName string) *ShareConfigTable {
	return newShareConfigTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ShareConfigTable with assigned table prefix
func (a ShareConfigTable) WithPrefix(prefix string) *ShareConfigTable {
	return newShareConfigTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ShareConfigTable with assigned table suffix
func (a ShareConfigTable) WithSuffix(suffix string) *ShareConfigTable {
	return newShareConfigTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newShareConfigTable(schemaName, tableName, alias string) *ShareConfigTable {
	return &ShareConfigTable{
		shareConfigTable: newShareConfigTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newShareConfigTableImpl("", "excluded", ""),
	}
}

func newShareConfigTableImpl(schemaName, tableName, alias string) shareConfigTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		OwnerIDColumn      = postgres.StringColumn("owner_id")
		FileIDColumn       = postgres.StringColumn("file_id")
		FolderIDColumn     = postgres.StringColumn("folder_id")
		PasswordHashColumn = postgres.StringColumn("password_hash")
		MaxDownloadsColumn = postgres.IntegerColumn("max_downloads")
		ExpiresAtColumn    = postgres.TimestampColumn("expires_at")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		allColumns         = postgres.ColumnList{IDColumn, OwnerIDColumn, FileIDColumn, FolderIDColumn, PasswordHashColumn, MaxDownloadsColumn, ExpiresAtColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{OwnerIDColumn, FileIDColumn, FolderIDColumn, PasswordHashColumn, MaxDownloadsColumn, ExpiresAtColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return shareConfigTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		OwnerID:      OwnerIDColumn,
		FileID:       FileIDColumn,
		FolderID:     FolderIDColumn,
		PasswordHash: PasswordHashColumn,
		MaxDownloads: MaxDownloadsColumn,
		ExpiresAt:    ExpiresAtColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
