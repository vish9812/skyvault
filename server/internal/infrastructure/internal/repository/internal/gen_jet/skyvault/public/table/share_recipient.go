//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ShareRecipient = newShareRecipientTable("public", "share_recipient", "")

type shareRecipientTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	ShareConfigID  postgres.ColumnString
	ContactID      postgres.ColumnString
	GroupID        postgres.ColumnString
	Email          postgres.ColumnString
	DownloadsCount postgres.ColumnInteger
	CreatedAt      postgres.ColumnTimestamp
	UpdatedAt      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ShareRecipientTable struct {
	shareRecipientTable

	EXCLUDED shareRecipientTable
}

// AS creates new ShareRecipientTable with assigned alias
func (a ShareRecipientTable) AS(alias string) *ShareRecipientTable {
	return newShareRecipientTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ShareRecipientTable with assigned schema name
func (a ShareRecipientTable) FromSchema(schemaName string) *ShareRecipientTable {
	return newShareRecipientTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ShareRecipientTable with assigned table prefix
func (a ShareRecipientTable) WithPrefix(prefix string) *ShareRecipientTable {
	return newShareRecipientTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ShareRecipientTable with assigned table suffix
func (a ShareRecipientTable) WithSuffix(suffix string) *ShareRecipientTable {
	return newShareRecipientTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newShareRecipientTable(schemaName, tableName, alias string) *ShareRecipientTable {
	return &ShareRecipientTable{
		shareRecipientTable: newShareRecipientTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newShareRecipientTableImpl("", "excluded", ""),
	}
}

func newShareRecipientTableImpl(schemaName, tableName, alias string) shareRecipientTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		ShareConfigIDColumn  = postgres.StringColumn("share_config_id")
		ContactIDColumn      = postgres.StringColumn("contact_id")
		GroupIDColumn        = postgres.StringColumn("group_id")
		EmailColumn          = postgres.StringColumn("email")
		DownloadsCountColumn = postgres.IntegerColumn("downloads_count")
		CreatedAtColumn      = postgres.TimestampColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		allColumns           = postgres.ColumnList{IDColumn, ShareConfigIDColumn, ContactIDColumn, GroupIDColumn, EmailColumn, DownloadsCountColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{ShareConfigIDColumn, ContactIDColumn, GroupIDColumn, EmailColumn, DownloadsCountColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return shareRecipientTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		ShareConfigID:  ShareConfigIDColumn,
		ContactID:      ContactIDColumn,
		GroupID:        GroupIDColumn,
		Email:          EmailColumn,
		DownloadsCount: DownloadsCountColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
