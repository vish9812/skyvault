//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ContactGroupMember = newContactGroupMemberTable("public", "contact_group_member", "")

type contactGroupMemberTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	GroupID   postgres.ColumnInteger
	ContactID postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ContactGroupMemberTable struct {
	contactGroupMemberTable

	EXCLUDED contactGroupMemberTable
}

// AS creates new ContactGroupMemberTable with assigned alias
func (a ContactGroupMemberTable) AS(alias string) *ContactGroupMemberTable {
	return newContactGroupMemberTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ContactGroupMemberTable with assigned schema name
func (a ContactGroupMemberTable) FromSchema(schemaName string) *ContactGroupMemberTable {
	return newContactGroupMemberTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ContactGroupMemberTable with assigned table prefix
func (a ContactGroupMemberTable) WithPrefix(prefix string) *ContactGroupMemberTable {
	return newContactGroupMemberTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ContactGroupMemberTable with assigned table suffix
func (a ContactGroupMemberTable) WithSuffix(suffix string) *ContactGroupMemberTable {
	return newContactGroupMemberTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newContactGroupMemberTable(schemaName, tableName, alias string) *ContactGroupMemberTable {
	return &ContactGroupMemberTable{
		contactGroupMemberTable: newContactGroupMemberTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newContactGroupMemberTableImpl("", "excluded", ""),
	}
}

func newContactGroupMemberTableImpl(schemaName, tableName, alias string) contactGroupMemberTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		GroupIDColumn   = postgres.IntegerColumn("group_id")
		ContactIDColumn = postgres.IntegerColumn("contact_id")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, GroupIDColumn, ContactIDColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{GroupIDColumn, ContactIDColumn, CreatedAtColumn}
	)

	return contactGroupMemberTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		GroupID:   GroupIDColumn,
		ContactID: ContactIDColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
