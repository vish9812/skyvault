//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Contact = newContactTable("public", "contact", "")

type contactTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	OwnerID   postgres.ColumnString
	Email     postgres.ColumnString
	Name      postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp
	UpdatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ContactTable struct {
	contactTable

	EXCLUDED contactTable
}

// AS creates new ContactTable with assigned alias
func (a ContactTable) AS(alias string) *ContactTable {
	return newContactTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ContactTable with assigned schema name
func (a ContactTable) FromSchema(schemaName string) *ContactTable {
	return newContactTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ContactTable with assigned table prefix
func (a ContactTable) WithPrefix(prefix string) *ContactTable {
	return newContactTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ContactTable with assigned table suffix
func (a ContactTable) WithSuffix(suffix string) *ContactTable {
	return newContactTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newContactTable(schemaName, tableName, alias string) *ContactTable {
	return &ContactTable{
		contactTable: newContactTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newContactTableImpl("", "excluded", ""),
	}
}

func newContactTableImpl(schemaName, tableName, alias string) contactTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		OwnerIDColumn   = postgres.StringColumn("owner_id")
		EmailColumn     = postgres.StringColumn("email")
		NameColumn      = postgres.StringColumn("name")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, OwnerIDColumn, EmailColumn, NameColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{OwnerIDColumn, EmailColumn, NameColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return contactTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		OwnerID:   OwnerIDColumn,
		Email:     EmailColumn,
		Name:      NameColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
