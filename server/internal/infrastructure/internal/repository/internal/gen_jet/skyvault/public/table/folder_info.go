//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FolderInfo = newFolderInfoTable("public", "folder_info", "")

type folderInfoTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	OwnerID        postgres.ColumnString
	Name           postgres.ColumnString
	ParentFolderID postgres.ColumnString
	TrashedAt      postgres.ColumnTimestamp
	CreatedAt      postgres.ColumnTimestamp
	UpdatedAt      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FolderInfoTable struct {
	folderInfoTable

	EXCLUDED folderInfoTable
}

// AS creates new FolderInfoTable with assigned alias
func (a FolderInfoTable) AS(alias string) *FolderInfoTable {
	return newFolderInfoTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FolderInfoTable with assigned schema name
func (a FolderInfoTable) FromSchema(schemaName string) *FolderInfoTable {
	return newFolderInfoTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FolderInfoTable with assigned table prefix
func (a FolderInfoTable) WithPrefix(prefix string) *FolderInfoTable {
	return newFolderInfoTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FolderInfoTable with assigned table suffix
func (a FolderInfoTable) WithSuffix(suffix string) *FolderInfoTable {
	return newFolderInfoTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFolderInfoTable(schemaName, tableName, alias string) *FolderInfoTable {
	return &FolderInfoTable{
		folderInfoTable: newFolderInfoTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newFolderInfoTableImpl("", "excluded", ""),
	}
}

func newFolderInfoTableImpl(schemaName, tableName, alias string) folderInfoTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		OwnerIDColumn        = postgres.StringColumn("owner_id")
		NameColumn           = postgres.StringColumn("name")
		ParentFolderIDColumn = postgres.StringColumn("parent_folder_id")
		TrashedAtColumn      = postgres.TimestampColumn("trashed_at")
		CreatedAtColumn      = postgres.TimestampColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		allColumns           = postgres.ColumnList{IDColumn, OwnerIDColumn, NameColumn, ParentFolderIDColumn, TrashedAtColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{OwnerIDColumn, NameColumn, ParentFolderIDColumn, TrashedAtColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return folderInfoTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		OwnerID:        OwnerIDColumn,
		Name:           NameColumn,
		ParentFolderID: ParentFolderIDColumn,
		TrashedAt:      TrashedAtColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
