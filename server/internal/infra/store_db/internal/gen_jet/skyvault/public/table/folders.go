//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Folders = newFoldersTable("public", "folders", "")

type foldersTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	OwnerID        postgres.ColumnInteger
	Name           postgres.ColumnString
	ParentFolderID postgres.ColumnInteger
	TrashedAt      postgres.ColumnTimestamp
	CreatedAt      postgres.ColumnTimestamp
	UpdatedAt      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FoldersTable struct {
	foldersTable

	EXCLUDED foldersTable
}

// AS creates new FoldersTable with assigned alias
func (a FoldersTable) AS(alias string) *FoldersTable {
	return newFoldersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FoldersTable with assigned schema name
func (a FoldersTable) FromSchema(schemaName string) *FoldersTable {
	return newFoldersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FoldersTable with assigned table prefix
func (a FoldersTable) WithPrefix(prefix string) *FoldersTable {
	return newFoldersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FoldersTable with assigned table suffix
func (a FoldersTable) WithSuffix(suffix string) *FoldersTable {
	return newFoldersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFoldersTable(schemaName, tableName, alias string) *FoldersTable {
	return &FoldersTable{
		foldersTable: newFoldersTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newFoldersTableImpl("", "excluded", ""),
	}
}

func newFoldersTableImpl(schemaName, tableName, alias string) foldersTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		OwnerIDColumn        = postgres.IntegerColumn("owner_id")
		NameColumn           = postgres.StringColumn("name")
		ParentFolderIDColumn = postgres.IntegerColumn("parent_folder_id")
		TrashedAtColumn      = postgres.TimestampColumn("trashed_at")
		CreatedAtColumn      = postgres.TimestampColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		allColumns           = postgres.ColumnList{IDColumn, OwnerIDColumn, NameColumn, ParentFolderIDColumn, TrashedAtColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{OwnerIDColumn, NameColumn, ParentFolderIDColumn, TrashedAtColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return foldersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		OwnerID:        OwnerIDColumn,
		Name:           NameColumn,
		ParentFolderID: ParentFolderIDColumn,
		TrashedAt:      TrashedAtColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
